#pragma once

Matrix4x4 Add(const Matrix4x4& m1, const Matrix4x4& m2)
{
	Matrix4x4 result;

	result.m[0][0] = m1.m[0][0] + m2.m[0][0];
	result.m[0][1] = m1.m[0][1] + m2.m[0][1];
	result.m[0][2] = m1.m[0][2] + m2.m[0][2];
	result.m[0][3] = m1.m[0][3] + m2.m[0][3];

	result.m[1][0] = m1.m[1][0] + m2.m[1][0];
	result.m[1][1] = m1.m[1][1] + m2.m[1][1];
	result.m[1][2] = m1.m[1][2] + m2.m[1][2];
	result.m[1][3] = m1.m[1][3] + m2.m[1][3];

	result.m[2][0] = m1.m[2][0] + m2.m[2][0];
	result.m[2][1] = m1.m[2][1] + m2.m[2][1];
	result.m[2][2] = m1.m[2][2] + m2.m[2][2];
	result.m[2][3] = m1.m[2][3] + m2.m[2][3];

	result.m[3][0] = m1.m[3][0] + m2.m[3][0];
	result.m[3][1] = m1.m[3][1] + m2.m[3][1];
	result.m[3][2] = m1.m[3][2] + m2.m[3][2];
	result.m[3][3] = m1.m[3][3] + m2.m[3][3];

	return result;
}

//inline Matrix4x4 Subtract(const Matrix4x4& m1, const Matrix4x4& m2)
//{
//	Matrix4x4 result = {};
//
//	result.m[0][0] = m1.m[0][0] - m2.m[0][0];
//	result.m[0][1] = m1.m[0][1] - m2.m[0][1];
//	result.m[0][2] = m1.m[0][2] - m2.m[0][2];
//	result.m[0][3] = m1.m[0][3] - m2.m[0][3];
//
//	result.m[1][0] = m1.m[1][0] - m2.m[1][0];
//	result.m[1][1] = m1.m[1][1] - m2.m[1][1];
//	result.m[1][2] = m1.m[1][2] - m2.m[1][2];
//	result.m[1][3] = m1.m[1][3] - m2.m[1][3];
//
//	result.m[2][0] = m1.m[2][0] - m2.m[2][0];
//	result.m[2][1] = m1.m[2][1] - m2.m[2][1];
//	result.m[2][2] = m1.m[2][2] - m2.m[2][2];
//	result.m[2][3] = m1.m[2][3] - m2.m[2][3];
//
//	result.m[3][0] = m1.m[3][0] - m2.m[3][0];
//	result.m[3][1] = m1.m[3][1] - m2.m[3][1];
//	result.m[3][2] = m1.m[3][2] - m2.m[3][2];
//	result.m[3][3] = m1.m[3][3] - m2.m[3][3];
//
//	return result;
//}
//
//inline Matrix4x4 Multiply(const Matrix4x4& m1, const Matrix4x4& m2)
//{
//	Matrix4x4 result = {};
//
//	for (int m = 0; m < 4; m++) {
//		for (int n = 0; n < 4; n++) {
//			result.m[m][n] = 0;
//			for (int i = 0; i < 3; i++) {
//				result.m[m][n] += m1.m[m][i] * m2.m[i][n];
//			}
//		}
//	}
//
//	/*result.m[0][0] = (m1.m[0][0] * m2.m[0][0]) + (m1.m[0][0] * m2.m[1][0]) + (m1.m[0][0] * m2.m[2][0]) * (m1.m[0][0] * m2.m[3][0]);
//	result.m[0][1] = (m1.m[1][0] * m2.m[0][1]) + (m1.m[1][0] * m2.m[1][1]) + (m1.m[1][0] * m2.m[2][1]) * (m1.m[1][0] * m2.m[3][1]);
//	result.m[0][2] = (m1.m[2][0] * m2.m[0][2]) + (m1.m[2][0] * m2.m[1][2]) + (m1.m[2][0] * m2.m[2][2]) * (m1.m[2][0] * m2.m[3][2]);
//	result.m[0][3] = (m1.m[3][0] * m2.m[0][3]) + (m1.m[3][0] * m2.m[1][3]) + (m1.m[3][0] * m2.m[2][3]) * (m1.m[3][0] * m2.m[3][3]);
//
//	result.m[1][0] = (m1.m[0][1] * m2.m[0][0]) + (m1.m[0][1] * m2.m[1][0]) + (m1.m[0][1] * m2.m[2][0]) * (m1.m[0][1] * m2.m[3][0]);
//	result.m[1][1] = (m1.m[1][1] * m2.m[0][1]) + (m1.m[1][1] * m2.m[1][1]) + (m1.m[1][1] * m2.m[2][1]) * (m1.m[1][1] * m2.m[3][1]);
//	result.m[1][2] = (m1.m[2][1] * m2.m[0][2]) + (m1.m[2][1] * m2.m[1][2]) + (m1.m[2][1] * m2.m[2][2]) * (m1.m[2][1] * m2.m[3][2]);
//	result.m[1][3] = (m1.m[3][1] * m2.m[0][3]) + (m1.m[3][1] * m2.m[1][3]) + (m1.m[3][1] * m2.m[2][3]) * (m1.m[3][1] * m2.m[3][3]);
//
//	result.m[2][0] = (m1.m[0][2] * m2.m[0][0]) + (m1.m[0][2] * m2.m[1][0]) + (m1.m[0][2] * m2.m[2][0]) * (m1.m[0][2] * m2.m[3][0]);
//	result.m[2][1] = (m1.m[1][2] * m2.m[0][1]) + (m1.m[1][2] * m2.m[1][1]) + (m1.m[1][2] * m2.m[2][1]) * (m1.m[1][2] * m2.m[3][1]);
//	result.m[2][2] = (m1.m[2][2] * m2.m[0][2]) + (m1.m[2][2] * m2.m[1][2]) + (m1.m[2][2] * m2.m[2][2]) * (m1.m[2][2] * m2.m[3][2]);
//	result.m[2][3] = (m1.m[3][2] * m2.m[0][3]) + (m1.m[3][2] * m2.m[1][3]) + (m1.m[3][2] * m2.m[2][3]) * (m1.m[3][2] * m2.m[3][3]);
//
//	result.m[3][0] = (m1.m[0][3] * m2.m[0][0]) + (m1.m[0][3] * m2.m[1][0]) + (m1.m[0][3] * m2.m[2][0]) * (m1.m[0][3] * m2.m[3][0]);
//	result.m[3][1] = (m1.m[1][3] * m2.m[0][1]) + (m1.m[1][3] * m2.m[1][1]) + (m1.m[1][3] * m2.m[2][1]) * (m1.m[1][3] * m2.m[3][1]);
//	result.m[3][2] = (m1.m[2][3] * m2.m[0][2]) + (m1.m[2][3] * m2.m[1][2]) + (m1.m[2][3] * m2.m[2][2]) * (m1.m[2][3] * m2.m[3][2]);
//	result.m[3][3] = (m1.m[3][0] * m2.m[0][3]) + (m1.m[3][3] * m2.m[1][3]) + (m1.m[3][3] * m2.m[2][3]) * (m1.m[3][3] * m2.m[3][3]);*/
//	
//	return result;
//}
//
//inline Matrix4x4 Inverse(const Matrix4x4& m)
//{
//	return Matrix4x4();
//}
//
//inline Matrix4x4 Transpose(const Matrix4x4& m)
//{
//	return Matrix4x4();
//}
//
